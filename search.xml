[{"title":"如何编写一个好的README","url":"https://wj-mcat.github.io/2021/05/01/skills/how-to-write-readme/","content":"<p>作为一个优秀的开源项目推广者。</p>\n<span id=\"more\"></span>\n\n<hr>\n<p>参考链接：</p>\n<ul>\n<li><a href=\"https://blog.bitsrc.io/how-to-write-beautiful-and-meaningful-readme-md-for-your-next-project-897045e3f991\">How to Write Beautiful and Meaningful README.md</a></li>\n</ul>\n","categories":["skills"],"tags":[]},{"title":"Technical Writer","url":"https://wj-mcat.github.io/2021/05/01/skills/technical-writer/","content":"<p>俗称，技术写手；融合写作技巧和沟通技巧，将复杂技术问题逐步拆解成容易理解的系列文档，这在企业级互联网公司中显得尤为重要，一个好的技术文档系统，能够帮助客户更快理解业务，上手工具使用，从而提升产品整体使用体验。</p>\n<p>对于热爱分享的Programmer来说，这是散播影响力的重要方式，所以学习如何做一个好的<code>Technical Writer</code>对于技术人员生涯来说，是一个非常不错的选择。</p>\n<span id=\"more\"></span>\n\n<p>在这篇文章中，我将大家介绍：什么是Technical Writer？如何成为一个Technical Writer？</p>\n<hr>\n<h2 id=\"什么是Technical-Writer\"><a href=\"#什么是Technical-Writer\" class=\"headerlink\" title=\"什么是Technical Writer\"></a>什么是Technical Writer</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>Technical Writer 是一个专业的活，负责简化复杂的技术系统，所以具体要做什么呢？</p>\n<ul>\n<li>系统介绍手册：比如：Rasa</li>\n<li>用户手册，比如：开源项目技术文档</li>\n<li>期刊文章，比如：知乎博文</li>\n<li>快速参考指南，比如：Quick Start</li>\n<li>白皮书，这个就比较复杂</li>\n</ul>\n<p>对于技术人员来说，会为开源项目编写用户手册，期刊文章等，放开发者能够从多方面了解该项目的细节，从而快速上手，提高该项目的知名度（例如：Github star），此时会给自己一个正向的反馈，从而更有信心来继续完善该项目。这个也是快速积攒人气，宣传自己的方式。</p>\n<h3 id=\"Technical-Writer-的目的\"><a href=\"#Technical-Writer-的目的\" class=\"headerlink\" title=\"Technical Writer 的目的\"></a>Technical Writer 的目的</h3><p>相信所有的技术人员都想成为大佬，这个必须依赖你的能力。尤雨溪在<a href=\"https://www.zhihu.com/question/456527668/answer/1858291784\">《怎么才能有尤雨溪一半强，该怎么学习？》</a>中的回答提到，其实强并没有很明确的分界线，可是在大众眼光中看来，强可由在影响力体现，而编写优秀的技术博客就是一个产生影响力的方式。</p>\n<p>不过回过头来，我们并不能抱着产生影响力的初衷来写技术博客，而是抱着钻研技术的态度来编写每一篇博客，这样才能让自己对每一个问题都有独特的见解，从而逐步提升自己的能力。</p>\n<h2 id=\"一定要成为Technical-Writer\"><a href=\"#一定要成为Technical-Writer\" class=\"headerlink\" title=\"一定要成为Technical Writer\"></a>一定要成为Technical Writer</h2><h3 id=\"最好的学习方法\"><a href=\"#最好的学习方法\" class=\"headerlink\" title=\"最好的学习方法\"></a>最好的学习方法</h3><p>相信很多技术人员都在感叹，日新月异的技术根本学不完，这个月出的技术下个月就被颠覆了，如果过了三十该何去何从。可这是由于对技术不热爱，技术也是艺术的一种，而且这种艺术还能够改变世界，是一件非常酷的事情。纵观国外的技术氛围，有很多白发苍苍的技术大佬在各种论坛上分享这段时间工作的成果，我们也都在钦佩他们的之外在感叹30岁的危机。</p>\n<p>发布高质量博客获得知名度，而知名度是继续学习发布博客最大的动力，良心循环是学习最好的现象。如果你是一个技术人员，快去尝试通过博客提升技术底蕴和知名度吧，相信你不会后悔。</p>\n<h3 id=\"行动力\"><a href=\"#行动力\" class=\"headerlink\" title=\"行动力\"></a>行动力</h3><p>有很多小伙伴，一开始说要学着写博客，可是很多都会卡在博客的搭建这个环节。会纠结到底是发布到哪个平台上比较合适，用什么主题比较合适，写博客的时间规划是多久比价合适等一系列的问题，曾经的我也被这些问题所困扰，迟迟没有开始。或许这都是需要有一个过程吧。</p>\n<p>当你想要实现某个想法的时候，此时此刻是最好的开始，一定不要delay到某个特殊时期，大数据告诉我们，这很可能会夭折，行动力就是当你有某个想法时，just do it.</p>\n<h3 id=\"可能性\"><a href=\"#可能性\" class=\"headerlink\" title=\"可能性\"></a>可能性</h3><p>技术人员只做技术并不是一个好的方向，因为这样以后就只能做技术。技术人员以后可以有很多发展方向，比如技术管理层、架构师、咨询师以及资深技术人员，甚至在生涯当中有机会编写一本技术书籍，而这些方向一切的基础都是拥有足够的技术底蕴以及了解新技术现状。</p>\n<p>而技术博客能够让技术人员探索当前热门技术的底层原理，结合自己的经验来剖析技术原理，让开发者能够从多个维度理解相关技术，这些都是能够给自己积攒知名度，对于以后找工作，公司提升基于来说都是一个非常不错的指标。坚持做好技术分享能够拓宽技术路线，给自己多个选择，消解国内的30岁危机。</p>\n<p>所以啊，坚持初衷，坚持写技术分享博客可以拓宽技术人员未来可能性，让未来的我们走的更加悠然。</p>\n<h3 id=\"自制力\"><a href=\"#自制力\" class=\"headerlink\" title=\"自制力\"></a>自制力</h3><p>坚持 意见事情真的挺难的，至少对于普通人来说是这个样子。</p>\n<p>相信有很多小伙伴都存在这样的苦恼，曾经制定过无数计划，都被遗忘在某个角落，等尝试过失败后却后悔莫及，为什么当初没有坚持下来。</p>\n<p>我不想再这个样子了，管理好自己的时间，充分利用好一分一秒，做自己不会后悔的事情。我想，这件事情能够坚持下来，那什么事情我不能坚持下来呢？</p>\n<hr>\n<h2 id=\"如何成为一个Technical-Writer？\"><a href=\"#如何成为一个Technical-Writer？\" class=\"headerlink\" title=\"如何成为一个Technical Writer？\"></a>如何成为一个Technical Writer？</h2><p>之前跟一个出版过书籍的朋友聊过，如何写技术博客？他只给我说了一句话：先别管写的如何，写出来就是最大的成就。</p>\n<p>所以，要成为一个优秀的Technical Writer，首先第一个就是要成为一个Writer，无论是不是优秀的。这也是为什么，我想要开始写，不想被周边琐碎的事情拖延开始的时间。</p>\n<blockquote>\n<p>写就完事了</p>\n</blockquote>\n<h3 id=\"系统性\"><a href=\"#系统性\" class=\"headerlink\" title=\"系统性\"></a>系统性</h3><p>写文章和学习类似，都需要系统性。</p>\n<p>如果你要开始写文章，我相信你肯定是写学习过程中的感悟，技术经验，而这些我相信都是应该高内聚的：在某一个领域内。如果能够在某个领域内坚持写下去，我相信未来的文章肯定会越来愈深入，逐步达到专家级的水平，而这个往往是与自己的实力相匹配。</p>\n<p>学习要有系统性，写文章也需要系统性，让自己专注在某个领域内，不断的探索其中的难题，分享解决方案。</p>\n<h3 id=\"少点拘束\"><a href=\"#少点拘束\" class=\"headerlink\" title=\"少点拘束\"></a>少点拘束</h3><p>不同阶段拥有不同的表现，在写作上也是如此。</p>\n<p>刚开始写博文，写出来便是最大的进步，其后不断的积累，经验会促使自己调整其结构以及叙述的方式，从而提升技术博文的可阅读性。</p>\n<p>写作是一个螺旋式上升的过程，不要太在意当下写的不好，而是要在意当下哪里写的不好，从而可以调整，这样才能解决主要矛盾，提升自我。</p>\n<h3 id=\"博文不是一蹴而就\"><a href=\"#博文不是一蹴而就\" class=\"headerlink\" title=\"博文不是一蹴而就\"></a>博文不是一蹴而就</h3><p>在工作和学习过程中，对于某个知识点的理解会不断纠错和加深的过程。</p>\n<p>我把博文当成自己的知识库，是一个不断更新的过程。比如我对Bert的理解会随着学习和工作加深对其的理解，于是回头来重新调整内容，加深对应知识点的理解。</p>\n<p>这是一个良性循环的过程，是一个系统性的活儿，是一个长期的活儿，需要坚持下来才会有爆发式的效益增长。</p>\n<h2 id=\"给自己的话\"><a href=\"#给自己的话\" class=\"headerlink\" title=\"给自己的话\"></a>给自己的话</h2><p>路走了很多遍，很多条，可是我一直在纠结哪一条是最好的。</p>\n<p>其实选择一条路，坚定的走下去，这条路肯定是最好的路。</p>\n","categories":["skills"],"tags":[]},{"title":"pre-commit 工具","url":"https://wj-mcat.github.io/2021/04/29/python/pre-commit/","content":"<p>现在DevOps已然成为项目当中一个常用方式，相信大家都有所涉猎，其中大部分都是基于Git项目管理来进行项目的协作，所以这个时候如何保证你所写的每一行代码都符合社区和公司规范，pre-commit工具能够帮助你更好的完成这个工作。</p>\n<p>pre-commit主要是为了完成git项目拉取和提交的过程中完成自定义的一些代码审查、日志记录、自动更新版本号等常见功能，当然也可以参与CD流程中的开发。那今天我就要来介绍pre-commit在实际使用过程中的小技巧。</p>\n<span id=\"more\"></span>\n\n<h2 id=\"一、快速上手\"><a href=\"#一、快速上手\" class=\"headerlink\" title=\"一、快速上手\"></a>一、快速上手</h2><h3 id=\"1-1-安装工具\"><a href=\"#1-1-安装工具\" class=\"headerlink\" title=\"1.1 安装工具\"></a>1.1 安装工具</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install pre-commit</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>别看是使用python来安装工具，可是在任何编程语言上都是通用的。</p>\n</blockquote>\n<p>安装完成之后即可查看对应工具的版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> pre-commit --version</span></span><br><span class=\"line\">pre-commit 2.12.1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-2-安装hook脚本\"><a href=\"#1-2-安装hook脚本\" class=\"headerlink\" title=\"1.2 安装hook脚本\"></a>1.2 安装hook脚本</h3><p>hook是什么？hook原意钩子，是在git提交之前，提交之后执行的脚本，能够进行代码审查，撤销提交操作等，也是这个工具的核心脚本。</p>\n<p>安装的脚本如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pre-commit install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-3-配置文件\"><a href=\"#1-3-配置文件\" class=\"headerlink\" title=\"1.3 配置文件\"></a>1.3 配置文件</h3><p>当开发者在push代码之前，需要对进行审查，或者push成功之后，在自动更新项目版本文件（VERSION），此类定制化的任务是需要通过配置文件来完成。</p>\n<p>配置文件能够在不同分支和git操作阶段执行自定义任务脚本，完成自定义的代码审查。添加配置文件有多种方式：</p>\n<ul>\n<li>手动添加一个文件：<code>.pre-commit-config.yaml</code></li>\n<li>通过命令行创建一个模板配置文件：<code>pre-commit sample-config</code></li>\n</ul>\n<p>设定一个场景，要在项目本地代码提交之前进行代码审查，其配置文件如下所示：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># the hook execution directory in under git root directory</span></span><br><span class=\"line\"><span class=\"attr\">repos:</span></span><br><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">repo:</span> <span class=\"string\">local</span></span><br><span class=\"line\">  <span class=\"attr\">hooks:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">id:</span> <span class=\"string\">pylint</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">pylint</span></span><br><span class=\"line\">    <span class=\"attr\">description:</span> <span class=\"string\">&quot;Pylint: Checks for errors in Python code&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">language:</span> <span class=\"string\">python</span></span><br><span class=\"line\">    <span class=\"attr\">entry:</span> <span class=\"string\">pylint</span> <span class=\"string\">./src</span></span><br><span class=\"line\">    <span class=\"attr\">always_run:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">verbose:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">require_serial:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">    <span class=\"attr\">stages:</span> [<span class=\"string\">push</span>]</span><br><span class=\"line\">    <span class=\"attr\">types:</span> [<span class=\"string\">text</span>]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-4-参数说明\"><a href=\"#1-4-参数说明\" class=\"headerlink\" title=\"1.4 参数说明\"></a>1.4 参数说明</h3><ul>\n<li><p>repos<br>  通过属性名即可得知，此配置文件可对多个repo配置hook，在上述配置当中我只对本地单个repo进行了配置。</p>\n<p>  注意，其中的repo名为：local。</p>\n</li>\n<li><p>hooks<br>  在每个项目当中，可以配置多个hooks任务，从而实现定制化的操作。同样，hooks也是一个列表属性。</p>\n</li>\n<li><p>id/name/description/language/<br>  此类属性是单个hook任务的描述信息。</p>\n</li>\n<li><p>entry<br>  这个就是该hook任务的自定义Bash脚本，大家可以在此处编写逻辑较为复杂的代码审查，也可以将复杂的脚本通过外部脚本文件来执行。这部分就是通过程序员自行扩展。</p>\n</li>\n<li><p>verbose<br>  是否在控制台中打印日志记录，这个通常会设置成True。</p>\n</li>\n<li><p>require_serial<br>  是否在一个进程当中执行该任务：通常情况下不同任务都是隔离的，没有依赖关系，如果审查的耗时较长，则可以设置为<code>False</code>加快其执行的速度。</p>\n</li>\n<li><p>stages<br>  当代码在提交时，会触发<code>commit</code>、<code>commit</code>,<code>merge-commit</code>, <code>push</code>, <code>prepare-commit-msg</code>, <code>commit-msg</code>, <code>post-checkout</code>, <code>post-commit</code>, <code>post-merge</code>, or <code>manual</code>，通常情况下使用<code>push</code>即可。</p>\n</li>\n<li><p>types<br>  pre-commit 工具会在不同类型的文件上制定对应的文件，</p>\n</li>\n</ul>\n","categories":["python"],"tags":["python"]},{"title":"关于Bert的一切","url":"https://wj-mcat.github.io/2021/04/28/nlp/plm/bert/","content":"<span id=\"more\"></span>\n\n<h2 id=\"idod\"><a href=\"#idod\" class=\"headerlink\" title=\"idod\"></a>idod</h2><h3 id=\"sdfsf\"><a href=\"#sdfsf\" class=\"headerlink\" title=\"sdfsf\"></a>sdfsf</h3><h3 id=\"sdfsdf\"><a href=\"#sdfsdf\" class=\"headerlink\" title=\"sdfsdf\"></a>sdfsdf</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.env</span><br></pre></td></tr></table></figure>","categories":["nlp","plm"],"tags":["nlp","bert"]},{"title":"about","url":"https://wj-mcat.github.io/about/index.html","content":"<p>Hello, developers.</p>\n<p>I’m 吴京京 👨‍💻, author of <a href=\"https://github.com/wechaty/python-wechaty\">python-wechaty</a>, intern of <a href=\"http://github.com/microsoft/\">microsoft</a>, artificial intelligence master of <a href=\"https://www.bupt.edu.cn/\">BUPT</a>, great passion about Chatbot.</p>\n<p>🎃 🎃 Latest activites:</p>\n<ul>\n<li>📄 writing documentation system of <a href=\"https://python-wechaty.readthedocs.io/\">python-wechaty</a></li>\n<li>📖 writing books: 《<a href=\"https://github.com/wechaty/chatbot-1-to-2\">Chatbot 从1到2</a>》</li>\n<li>👐 give more energy on <a href=\"https://github.com/wechaty/wechaty\">wechaty</a></li>\n<li>🦈 …</li>\n</ul>\n<p>Talks:</p>\n<ul>\n<li>2021.4.14 <a href=\"https://www.bilibili.com/video/BV16U4y1h7dc\">几行代码带你打造专属的AI ChatBot</a></li>\n<li>2020.11.21 <a href=\"https://ng-china.org/#speakers\">基于机器学习的聊天机器人</a></li>\n<li>2020.11.14 <a href=\"https://wx.vzan.com/live/tvchat-425619793#/\">开源教育：2:41:24 Multi-Wechaty SDK for Chatbot</a></li>\n<li>2020.10.24 <a href=\"https://segmentfault.com/area/coscon-2020\">2020 中国开源年会暨阿帕奇中国路演 - 人工智能OSS + AI | 分会场 - Multi：适合聊天机器人的Wechaty SDK</a></li>\n</ul>\n","categories":[],"tags":[]},{"title":"tags","url":"https://wj-mcat.github.io/tags/index.html","content":"<p>dynamic search</p>\n","categories":[],"tags":[]}]